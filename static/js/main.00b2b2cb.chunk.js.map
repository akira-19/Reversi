{"version":3,"sources":["background.jpg","logo.svg","GetPieces.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GetPieces","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataKey","activePlayer","activePlayerNum","stackId","setStone","bind","assertThisInitialized","createGame","joinGame","payBack","contract","props","drizzle","contracts","Reversi","methods","cacheCall","setState","e","_this$props","drizzleState","squareBoard","value","accounts","board","getPieces","getActivePlayerNum","parseInt","id","target","slice","serializedBoard","array","i","push","length","posX","posY","Math","floor","_posX","_posY","_activePlayer","opponent","getOpponent","j","flipPieces","turnOverPiece","cacheSend","from","switchActivePlayer","placePiece","serialBoard","x","y","serializeTheBoard","diffX","diffY","counter","initDiffX","initDiffY","a","_this$props2","wei","pow","_this$props3","_this$props4","that","react_default","createElement","className","href","style","backgroundImage","concat","bg","tdArray","trArray","trId","pieceDiv","onClick","map","elem","showBoard","React","Component","App","loading","_this2","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","src_GetPieces","Boolean","window","location","hostname","match","options","drizzleStore","generateStore","Drizzle","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yrzJCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iTCsTzBC,cAlTX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,QAAS,KACdC,aAAc,KACdC,gBAAiB,KACjBC,QAAS,MAEnBX,EAAKY,SAAWZ,EAAKY,SAASC,KAAdZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAChBA,EAAKe,WAAaf,EAAKe,WAAWF,KAAhBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAClBA,EAAKgB,SAAWhB,EAAKgB,SAASH,KAAdZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAChBA,EAAKiB,QAAUjB,EAAKiB,QAAQJ,KAAbZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAVNA,mFAcO,IAGZkB,EADcf,KAAKgB,MAAjBC,QACiBC,UAAUC,QAG7Bd,EAAUU,EAASK,QAAT,UAA8BC,YACxCf,EAAeS,EAASK,QAAT,aAAiCC,YAChDd,EAAkBQ,EAASK,QAAT,mBAAuCC,YAE/DrB,KAAKsB,SAAS,CAAEjB,UAASC,eAAcC,qDAOhCgB,GACL,IACIhB,EAFIiB,EAG0BxB,KAAKgB,MAA/BC,EAHAO,EAGAP,QAASQ,EAHTD,EAGSC,aACXV,EAAWE,EAAQC,UAAUC,QAC3BA,EAAYnB,KAAKgB,MAAMS,aAAaP,UAApCC,QACJO,EAAc,GAClB,GAAIP,EAAQb,aAAaN,KAAKI,MAAMC,SAASsB,QAAUF,EAAaG,SAAS,GAAG,CAC5E,IAAMC,EAAQV,EAAQW,UAAU9B,KAAKI,MAAMC,SAG3C,GAFAE,EAAkBY,EAAQY,mBAAmB/B,KAAKI,MAAMG,iBACxDA,EAAkByB,SAASzB,EAAgBoB,OACvCE,EAAO,CACP,IAAII,EAAKV,EAAEW,OAAOD,GAAGE,MAAM,GAC3BF,EAAKD,SAASC,GAId,IAHA,IAAIG,EAAkBP,EAAMF,MAExBU,EAAQ,GACHC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAME,KAAKP,SAASI,EAAgBE,KACf,IAAjBD,EAAMG,SACNd,EAAYa,KAAKF,GACjBA,EAAQ,IAKhB,IAAMI,EAAOR,EAAK,EACZS,EAAOC,KAAKC,MAAMX,EAAK,GAO7B,GAgBR,SAAoBY,EAAOC,EAAOC,GAC9B,IAAIC,EAUR,SAAqBD,GACjB,OAAsB,IAAlBA,EACO,EAEA,EAdIE,CAAYF,GAC3B,GAAkC,IAA9BrB,EAAYoB,GAAOD,GAKnB,QAyBR,SAAuBH,EAAMD,EAAMO,GAC/B,IAAK,IAAIV,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAIY,GAAK,EAAGA,GAAK,EAAGA,IAChBR,EAAKQ,GAAI,GAAMR,EAAKQ,GAAI,GAAMT,EAAKH,GAAI,GAAMG,EAAKH,GAAI,GAAKZ,EAAYgB,EAAKQ,GAAGT,EAAKH,IAAMU,GAC3FG,EAAWT,EAAMD,EAAMS,EAAGZ,EAAGU,GAjCrCI,CAAcN,EAAOD,EAAOG,GAgBpC,SAA4BF,EAAOD,EAAOE,GAClCrB,EAAYoB,GAAOD,KAAWE,IACR,IAAlBA,EACe,EAEA,EAEnBhC,EAASK,QAAT,gBAAoCiC,UAAU,CAC5CC,KAAM7B,EAAaG,SAAS,MAvB9B2B,CAAmBT,EAAOD,EAAOE,GAzBjCS,CAAWf,EAAMC,EAAMnC,GAEvB6B,EAyFR,WAEI,IADA,IAAIqB,EAAc,GACTnB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIoB,OAAC,EACDC,OAAC,EACLD,EAAIpB,EAAI,EACRqB,EAAIhB,KAAKC,MAAMN,EAAI,GACnBmB,EAAYnB,GAAKZ,EAAYiC,GAAGD,GAEpC,OAAOD,EAlGeG,GAGdlC,EAAYgB,GAAMD,KAAUlC,EAAgB,CAE5C,IAAMC,EAAUO,EAASK,QAAT,UAA8BiC,UAAUjB,EAAiB,CACvEkB,KAAM7B,EAAaG,SAAS,KAI9B5B,KAAKsB,SAAS,CAAEd,cAmD5B,SAAS2C,EAAWT,EAAMD,EAAMS,EAAGZ,EAAGU,GAElC,IAGIa,EACAC,EAJAC,EAAU,EACVC,EAAY1B,EACZ2B,EAAYf,EAGhB,EAAG,CAKA,GAFCY,EAAQG,IAFRF,EAIItB,GAHJoB,EAAQG,EAAYD,GAGA,GAAMtB,EAAOoB,EAAS,GAAMnB,EAAOoB,EAAS,GAAMpB,EAAOoB,EAAS,EACnF,MAGH,GAAgD,IAA5CpC,EAAYgB,EAAOoB,GAAOrB,EAAOoB,GACjC,MACE,GAAInC,EAAYgB,EAAOoB,GAAOrB,EAAOoB,KAAWtD,EAAgB,CAClE,IAAK,IAAI2D,EAAI,EAAGA,EAAIH,EAASG,IACzBxC,EAAYgB,EAAQwB,EAAIhB,GAAIT,EAAQyB,EAAI5B,GAAM/B,EAElDmB,EAAYgB,GAAMD,GAAQlC,SAGzBmB,EAAYgB,EAAOoB,GAAOrB,EAAOoB,KAAWb,yCAkBnD,IAAAmB,EAC0BnE,KAAKgB,MAA/BC,EADAkD,EACAlD,QAASQ,EADT0C,EACS1C,aACXV,EAAWE,EAAQC,UAAUC,QAE7BiD,GADcpE,KAAKgB,MAAMS,aAAaP,UAApCC,QACCwB,KAAA0B,IAAG,GAAM,KAClBtD,EAASK,QAAT,WAA+BiC,UAAU,CACvCC,KAAM7B,EAAaG,SAAS,GAC5BD,MAAOyC,uCAIH,IAAAE,EAC4BtE,KAAKgB,MAA/BC,EADFqD,EACErD,QAASQ,EADX6C,EACW7C,aACXV,EAAWE,EAAQC,UAAUC,QAE7BiD,GADcpE,KAAKgB,MAAMS,aAAaP,UAApCC,QACCwB,KAAA0B,IAAG,GAAM,KAClBtD,EAASK,QAAT,SAA6BiC,UAAU,CACrCC,KAAM7B,EAAaG,SAAS,GAC5BD,MAAOyC,sCAIJ,IAAAG,EAC6BvE,KAAKgB,MAA/BC,EADHsD,EACGtD,QAASQ,EADZ8C,EACY9C,aACXV,EAAWE,EAAQC,UAAUC,QACfnB,KAAKgB,MAAMS,aAAaP,UAApCC,QACRJ,EAASK,QAAT,QAA4BiC,UAAU,CACpCC,KAAM7B,EAAaG,SAAS,sCAUvB,IAMDC,EAHc7B,KAAKgB,MAAMS,aAAaP,UAApCC,QAGcW,UAAU9B,KAAKI,MAAMC,SAGvCmE,EAAOxE,KAgDX,OACIyE,EAAAP,EAAAQ,cAAA,WACAD,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,UACXF,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,SAAQF,EAAAP,EAAAQ,cAAA,KAAGE,KAAK,KAAR,qBACvBH,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,QACXF,EAAAP,EAAAQ,cAAA,UACID,EAAAP,EAAAQ,cAAA,UAAID,EAAAP,EAAAQ,cAAA,KAAGC,UAAU,GAAGC,KAAK,UAArB,eACJH,EAAAP,EAAAQ,cAAA,UAAID,EAAAP,EAAAQ,cAAA,KAAGC,UAAU,GAAGC,KAAK,iBAArB,iBAIhBH,EAAAP,EAAAQ,cAAA,OAAKzC,GAAG,UAAU4C,MAAO,CAACC,gBAAe,OAAAC,OAAQC,IAAR,OACrCP,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,aACXF,EAAAP,EAAAQ,cAAA,qBACAD,EAAAP,EAAAQ,cAAA,0CAGJD,EAAAP,EAAAQ,cAAA,SAAOzC,GAAG,gBACRwC,EAAAP,EAAAQ,cAAA,aAhEV,WACI,IAAIO,EAAU,GACVC,EAAU,GAEV9C,EAAiB,GACrB,GAAIP,EACCO,EAAkBP,EAAMF,WAEzB,IAAK,IAAIuB,EAAI,EAAGA,EAAI,GAAIA,IACpBd,EAAgBG,KAAK,KAI7B,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIL,EAAK,MAAQK,EACb6C,EAAO,QAAU7C,EACjB8C,EAAWX,EAAAP,EAAAQ,cAAA,YAEf,OAAQtC,EAAgBE,IACpB,IAAK,IACD8C,EAAWX,EAAAP,EAAAQ,cAAA,YACX,MACJ,IAAK,IACDU,EAAWX,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,eAC1B,MACJ,IAAK,IACDS,EAAWX,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,eAC1B,MACJ,QACES,EAAWX,EAAAP,EAAAQ,cAAA,YAGbpC,EAAE,IAAM,EACR2C,EAAQ1C,KAAKkC,EAAAP,EAAAQ,cAAA,MAAIzC,GAAIA,EAAI0C,UAAU,aAAaU,QAASb,EAAK/D,UAAW2E,KAEzEH,EAAQ1C,KAAKkC,EAAAP,EAAAQ,cAAA,MAAIzC,GAAIA,EAAI0C,UAAU,aAAaU,QAASb,EAAK/D,UAAY2E,IAC1EF,EAAQ3C,KAAKkC,EAAAP,EAAAQ,cAAA,MAAIzC,GAAIkD,GAAOF,IAC5BA,EAAU,IAMlB,OAHgBC,EAAQI,IAAI,SAAAC,GACzB,OAAOA,IAwBHC,KAGHf,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,UAAQC,UAAU,MAAMU,QAASrF,KAAKY,YAAtC,eACA6D,EAAAP,EAAAQ,cAAA,UAAQC,UAAU,MAAMU,QAASrF,KAAKa,UAAtC,aACA4D,EAAAP,EAAAQ,cAAA,UAAQC,UAAU,MAAMU,QAASrF,KAAKc,SAAtC,aAEF2D,EAAAP,EAAAQ,cAAA,OAAKzC,GAAG,SACJwC,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,aACXF,EAAAP,EAAAQ,cAAA,2CACAD,EAAAP,EAAAQ,cAAA,wFACAD,EAAAP,EAAAQ,cAAA,yCACAD,EAAAP,EAAAQ,cAAA,mFACAD,EAAAP,EAAAQ,cAAA,+BACAD,EAAAP,EAAAQ,cAAA,8DACAD,EAAAP,EAAAQ,cAAA,0BACAD,EAAAP,EAAAQ,cAAA,6IACAD,EAAAP,EAAAQ,cAAA,6CA1SEe,IAAMC,WC8CfC,6MA3CbvF,MAAQ,CACJwF,SAAS,EACTnE,aAAc,yFAIE,IAAAoE,EAAA7F,KACViB,EAAYjB,KAAKgB,MAAjBC,QAIRjB,KAAK8F,YAAc7E,EAAQ8E,MAAMC,UAAU,WAGzC,IAAMvE,EAAeR,EAAQ8E,MAAME,WAG/BxE,EAAayE,cAAcC,aAC7BN,EAAKvE,SAAS,CAAEsE,SAAS,EAAOnE,kEAMpCzB,KAAK8F,+CAIP,OAAI9F,KAAKI,MAAMwF,QAAgB,qBAE7BnB,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,OACbF,EAAAP,EAAAQ,cAAC0B,EAAD,CACEnF,QAASjB,KAAKgB,MAAMC,QACpBQ,aAAczB,KAAKI,MAAMqB,uBAlCfiE,aCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECRAC,EAAU,CAAExF,UAAW,UACvByF,EAAeC,wBAAcF,GAC7BzF,EAAU,IAAI4F,UAAQH,EAASC,GAIrCG,IAASC,OAAOtC,EAAAP,EAAAQ,cAACsC,EAAD,CAAK/F,QAASA,IAAagG,SAASC,eAAe","file":"static/js/main.00b2b2cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.582aef09.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport bg from \"./background.jpg\"\n\nclass GetPieces extends React.Component {\n    constructor(){\n        super();\n        this.state = { dataKey: null,\n                  activePlayer: null,\n                  activePlayerNum: null,\n                  stackId: null\n                 };\n        this.setStone = this.setStone.bind(this);\n        this.createGame = this.createGame.bind(this);\n        this.joinGame = this.joinGame.bind(this);\n        this.payBack = this.payBack.bind(this);\n    }\n\n\n    componentDidMount() {\n      // drizzle instance is what you will use to actually get stuff done (i.e. call contract methods, the Web3 instance, etc.)\n      const { drizzle } = this.props;\n      const contract = drizzle.contracts.Reversi;\n\n      // let drizzle know we want to watch the `getPieces` method\n      const dataKey = contract.methods[\"getPieces\"].cacheCall();\n      const activePlayer = contract.methods[\"activePlayer\"].cacheCall();\n      const activePlayerNum = contract.methods[\"getActivePlayerNum\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n      this.setState({ dataKey, activePlayer, activePlayerNum });\n\n    }\n\n\n\n\n    setStone(e) {\n        let activePlayer;\n        let activePlayerNum;\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.Reversi;\n        const { Reversi } = this.props.drizzleState.contracts;\n        let squareBoard = [];\n        if (Reversi.activePlayer[this.state.dataKey].value === drizzleState.accounts[0]){\n            const board = Reversi.getPieces[this.state.dataKey];\n            activePlayerNum = Reversi.getActivePlayerNum[this.state.activePlayerNum];\n            activePlayerNum = parseInt(activePlayerNum.value);\n            if (board) {\n                let id = e.target.id.slice(3);\n                id = parseInt(id);\n                let serializedBoard = board.value;\n\n                let array = [];\n                for (var i = 0; i < 64; i++) {\n                    array.push(parseInt(serializedBoard[i]));\n                    if (array.length === 8){\n                        squareBoard.push(array);\n                        array = [];\n                    }\n\n                }\n\n                const posX = id % 8;\n                const posY = Math.floor(id / 8);\n\n                placePiece(posX, posY, activePlayerNum);\n\n                serializedBoard = serializeTheBoard();\n\n\n                if (squareBoard[posY][posX] === activePlayerNum){\n                    // let drizzle know we want to call the `set` method with `value`\n                    const stackId = contract.methods[\"setPieces\"].cacheSend(serializedBoard, {\n                      from: drizzleState.accounts[0]\n                    });\n\n                    // save the `stackId` for later reference\n                    this.setState({ stackId });\n                }\n\n\n            }\n        }\n\n\n\n        function placePiece(_posX, _posY, _activePlayer){\n            let opponent = getOpponent(_activePlayer);\n            if (squareBoard[_posY][_posX] === 0){\n                turnOverPiece(_posY, _posX, opponent);\n                switchActivePlayer(_posY, _posX, _activePlayer);\n\n            }else{\n                return;\n            }\n        }\n\n        function getOpponent(_activePlayer) {\n            if (_activePlayer === 1){\n                return 2;\n            }else{\n                return 1;\n            }\n        }\n\n        function switchActivePlayer(_posY, _posX, _activePlayer){\n            if (squareBoard[_posY][_posX] === _activePlayer){\n                if (_activePlayer === 1) {\n                    activePlayer = 2;\n                }else{\n                    activePlayer = 1;\n                }\n                contract.methods[\"setActivePlayer\"].cacheSend({\n                  from: drizzleState.accounts[0]\n                });\n            }\n        }\n\n        function turnOverPiece(posY, posX, opponent){\n            for (var i = -1; i <= 1; i++) {\n                for (var j = -1; j <= 1; j++) {\n                    if ((posY+j)>=0 && (posY+j)<=7 && (posX+i)>=0 && (posX+i)<=7 && squareBoard[posY+j][posX+i] == opponent){\n                        flipPieces(posY, posX, j, i, opponent);\n                    }\n                }\n            }\n        }\n\n        function flipPieces(posY, posX, j, i, opponent){\n\n            let counter = 1;\n            let initDiffX = i;\n            let initDiffY = j;\n            let diffX;\n            let diffY;\n            do {\n                counter++;\n                diffX = initDiffX * counter;\n                diffY = initDiffY * counter;\n\n               if ((posX + diffX) > 7 || (posX + diffX) < 0 || (posY + diffY) > 7 || (posY + diffY) < 0){\n                   break;\n               }\n\n                if (squareBoard[posY + diffY][posX + diffX] === 0){\n                    break;\n                }else if (squareBoard[posY + diffY][posX + diffX] === activePlayerNum){\n                    for (var a = 1; a < counter; a++){\n                        squareBoard[posY + (a * j)][posX + (a * i)] = activePlayerNum;\n                    }\n                    squareBoard[posY][posX] = activePlayerNum;\n                }\n\n            } while (squareBoard[posY + diffY][posX + diffX] === opponent);\n        }\n\n        function serializeTheBoard() {\n            let serialBoard = [];\n            for (var i = 0; i < 64; i++) {\n                let x;\n                let y;\n                x = i % 8;\n                y = Math.floor(i / 8);\n                serialBoard[i] = squareBoard[y][x];\n            }\n            return serialBoard;\n        }\n\n\n  }\n\n  createGame(){\n      const { drizzle, drizzleState } = this.props;\n      const contract = drizzle.contracts.Reversi;\n      const { Reversi } = this.props.drizzleState.contracts;\n      const wei = 10 ** 17;\n      contract.methods[\"createGame\"].cacheSend({\n        from: drizzleState.accounts[0],\n        value: wei\n      });\n  }\n\n  joinGame(){\n      const { drizzle, drizzleState } = this.props;\n      const contract = drizzle.contracts.Reversi;\n      const { Reversi } = this.props.drizzleState.contracts;\n      const wei = 10 ** 17;\n      contract.methods[\"joinGame\"].cacheSend({\n        from: drizzleState.accounts[0],\n        value: wei\n      });\n  }\n\n  payBack(){\n      const { drizzle, drizzleState } = this.props;\n      const contract = drizzle.contracts.Reversi;\n      const { Reversi } = this.props.drizzleState.contracts;\n      contract.methods[\"payBack\"].cacheSend({\n        from: drizzleState.accounts[0]\n      });\n  }\n\n\n\n\n\n\n\n    render() {\n      // get the contract state from drizzleState\n      // drizzleState is there for you to read information from (i.e. contract state variables, return values, transaction status, account data, etc.)\n      const { Reversi } = this.props.drizzleState.contracts;\n\n      // using the saved `dataKey`, get the variable we're interested in\n      const board = Reversi.getPieces[this.state.dataKey];\n\n      // if it exists, then we display its value\n      let that = this;\n\n      function showBoard(){\n          let tdArray = [];\n          let trArray = [];\n\n          let serializedBoard =[];\n          if (board) {\n               serializedBoard = board.value;\n          }else{\n              for (var j = 0; j < 64; j++) {\n                  serializedBoard.push(\"0\");\n              }\n          }\n\n          for (var i = 0; i < 64; i++) {\n              let id = 'id-' + i;\n              let trId = 'trId-' + i;\n              let pieceDiv = <div></div>;\n\n              switch (serializedBoard[i]) {\n                  case \"0\":\n                      pieceDiv = <div></div>\n                      break;\n                  case \"1\":\n                      pieceDiv = <div className=\"blackPiece\"></div>\n                      break;\n                  case \"2\":\n                      pieceDiv = <div className=\"whitePiece\"></div>\n                      break;\n                  default:\n                    pieceDiv = <div></div>\n              }\n\n              if (i%8 !== 7){\n                  tdArray.push(<td id={id} className=\"tdElements\" onClick={that.setStone}>{pieceDiv}</td>);\n              }else{\n                  tdArray.push(<td id={id} className=\"tdElements\" onClick={that.setStone} >{pieceDiv}</td>);\n                  trArray.push(<tr id={trId}>{tdArray}</tr>);\n                  tdArray = [];\n              }\n          }\n          let tableElem = trArray.map(elem => {\n             return elem\n          });\n          return tableElem\n      }\n\n      return (\n          <div>\n          <nav className=\"navbar\">\n              <div className=\"title\"><a href=\"#\">10 weeks project</a></div>\n              <div className=\"menu\">\n                  <ul>\n                      <li><a className=\"\" href=\"#usage\">How to use</a></li>\n                      <li><a className=\"\" href=\"#reversiTable\">Play game</a></li>\n                  </ul>\n              </div>\n          </nav>\n          <div id=\"toppage\" style={{backgroundImage:`url(${bg})`}}>\n              <div className=\"titleText\">\n                  <h2>Reversi</h2>\n                  <p>Play reversi and earn ether</p>\n              </div>\n          </div>\n              <table id=\"reversiTable\">\n                <tbody>\n                {showBoard()}\n                </tbody>\n              </table>\n              <div>\n                <button className=\"btn\" onClick={this.createGame}>Create Game</button>\n                <button className=\"btn\" onClick={this.joinGame}>Join Game</button>\n                <button className=\"btn\" onClick={this.payBack}>Get Paid</button>\n              </div>\n              <div id=\"usage\">\n                  <div className=\"usageList\">\n                      <h3>1. Click \"Create Game\" button</h3>\n                      <p>Click \"Create Game\" button to initialize a game. You have to bet 0.1 ehter.</p>\n                      <h3>2. Click \"Join Game\" button</h3>\n                      <p>Click \"Join Game\" button to start the game. You have to bet 0.1 ehter.</p>\n                      <h3>3. Start the game</h3>\n                      <p>The one that created the game can start tha game.</p>\n                      <h3>4. Get money</h3>\n                      <p>After finishing the game, and if you win, you can get ether. Click \"Get Paid\" button. If it's even, both player get ehter back.</p>\n                      <h3>* Use Ropsten network</h3>\n                  </div>\n              </div>\n          </div>\n      );\n\n    }\n}\n\nexport default GetPieces;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GetPieces from \"./GetPieces\";\n\nclass App extends Component {\n  state = {\n      loading: true, // initializing drizzle\n      drizzleState: null\n  };\n\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    // This callback function of subscribe() is called whenever the Drizzle store is updated\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n  if (this.state.loading) return \"Loading Drizzle...\";\n  return (\n    <div className=\"App\">\n      <GetPieces\n        drizzle={this.props.drizzle}\n        drizzleState={this.state.drizzleState}\n      />\n      \n    </div>\n  );\n}\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import drizzle functions and contract artifact\nimport { Drizzle, generateStore } from \"drizzle\";\n// import { DrizzleContext } from 'drizzle-react';\nimport Reversi from \"./contracts/Reversi.json\";\nconst options = { contracts: [Reversi] };\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore)\n\n\n\nReactDOM.render(<App drizzle={drizzle} />, document.getElementById('root'));\n"],"sourceRoot":""}